{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Trabalho\\\\frontend\\\\Desafio Globo\\\\front\\\\src\\\\drawer\\\\customDrawer.js\",\n    _s = $RefreshSig$();\n\nimport { Drawer, Box, TextField, Typography, Button, Checkbox } from '@material-ui/core';\nimport { Edit as EditIcon, Close as CloseIcon } from '@material-ui/icons';\nimport React from 'react';\nimport DrawerStyle from './customDrawer.style';\n\nfunction customDrawer(props) {\n  _s();\n\n  const styles = DrawerStyle();\n  const [check, setCheck] = useState(false);\n  useEffect(() => {\n    setCheck(props.row.status);\n  }, []);\n\n  async function updateEntry(event) {\n    try {\n      let url = `http://localhost:8080/user/${props.row._id}`;\n      let response = await fetch(url, {\n        method: 'PATCH',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: {\n          username: '',\n          email: '',\n          rules: '',\n          status: check\n        }\n      });\n      let json = await response.json();\n\n      if (json.message === 'Usuario atualizado com sucesso') {\n        props.handleClose();\n        props.getUsersAfterUpdate(0);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Drawer, {\n    anchor: \"right\",\n    open: props.open,\n    onClose: props.handleClose,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      className: styles.body,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        className: styles.head,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          className: styles.head,\n          children: [/*#__PURE__*/_jsxDEV(EditIcon, {\n            className: styles.grayIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            className: styles.darkGrayText,\n            children: props.type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: styles.headButton,\n          variant: \"contained\",\n          onClick: props.handleClose,\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n            className: styles.grayButtonIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: styles.form,\n        onsubmit: updateEntry,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          className: styles.formText,\n          id: \"user\",\n          label: \"Usu\\xE1rio\",\n          type: \"text\",\n          style: {\n            color: 'green'\n          },\n          defaultValue: props.row != null ? props.row.username : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          className: styles.formText,\n          id: \"email\",\n          label: \"Email\",\n          type: \"email\",\n          defaultValue: props.row != null ? props.row.email : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          className: styles.formText,\n          id: \"rules\",\n          label: \"Regras\",\n          defaultValue: props.row != null ? props.row.rules : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n          checked: check,\n          onChange: event => {\n            setCheck(event.target.checked);\n          },\n          inputProps: {\n            'aria-label': 'select all desserts'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          className: styles.formText,\n          id: \"status\",\n          label: \"Status\",\n          defaultValue: props.row != null ? props.row.status : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: styles.formButton,\n          variant: \"outlined\",\n          color: \"#D83367\",\n          type: \"submit\",\n          children: \"Confirmar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(customDrawer, \"MlGyz5WnialQ8kF9iIFA++BZIgw=\");\n\nexport default customDrawer;","map":{"version":3,"sources":["D:/Trabalho/frontend/Desafio Globo/front/src/drawer/customDrawer.js"],"names":["Drawer","Box","TextField","Typography","Button","Checkbox","Edit","EditIcon","Close","CloseIcon","React","DrawerStyle","customDrawer","props","styles","check","setCheck","useState","useEffect","row","status","updateEntry","event","url","_id","response","fetch","method","headers","Accept","body","username","email","rules","json","message","handleClose","getUsersAfterUpdate","error","console","open","head","grayIcon","darkGrayText","type","headButton","grayButtonIcon","form","formText","color","target","checked","formButton"],"mappings":"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","sourcesContent":["import { Drawer, Box, TextField, Typography, Button, Checkbox } from '@material-ui/core';\r\nimport { Edit as EditIcon, Close as CloseIcon } from '@material-ui/icons';\r\nimport React from 'react';\r\nimport DrawerStyle from './customDrawer.style';\r\n\r\nfunction customDrawer(props) {\r\n    const styles = DrawerStyle();\r\n    const [check, setCheck] =  useState(false);\r\n\r\n    useEffect(() => {\r\n        setCheck(props.row.status);\r\n      }, []);\r\n\r\n    async function updateEntry(event) {\r\n        try {\r\n            let url = `http://localhost:8080/user/${props.row._id}`;\r\n            let response = await fetch(\r\n                url, {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: {\r\n                    username: '',\r\n                    email: '',\r\n                    rules: '',\r\n                    status: check\r\n                }\r\n            });\r\n            let json = await response.json();\r\n            if (json.message === 'Usuario atualizado com sucesso') {\r\n                props.handleClose();\r\n                props.getUsersAfterUpdate(0);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            anchor=\"right\"\r\n            open={props.open}\r\n            onClose={props.handleClose}>\r\n            <Box className={styles.body}>\r\n                <Box className={styles.head}>\r\n                    <Box className={styles.head}>\r\n                        <EditIcon className={styles.grayIcon} />\r\n                        <Typography className={styles.darkGrayText}>{props.type}</Typography>\r\n                    </Box>\r\n                    <Button\r\n                        className={styles.headButton}\r\n                        variant='contained'\r\n                        onClick={props.handleClose}>\r\n                        <CloseIcon className={styles.grayButtonIcon} />\r\n                    </Button>\r\n                </Box>\r\n                <form className={styles.form} onsubmit={updateEntry}>\r\n                    <TextField\r\n                        className={styles.formText}\r\n                        id=\"user\"\r\n                        label=\"Usuário\"\r\n                        type=\"text\"\r\n                        style={{ color: 'green' }}\r\n                        defaultValue={props.row != null ? props.row.username : ''} />\r\n                    <TextField\r\n                        className={styles.formText}\r\n                        id=\"email\"\r\n                        label=\"Email\"\r\n                        type=\"email\"\r\n                        defaultValue={props.row != null ? props.row.email : ''} />\r\n                    <TextField\r\n                        className={styles.formText}\r\n                        id=\"rules\"\r\n                        label=\"Regras\"\r\n                        defaultValue={props.row != null ? props.row.rules : ''} />\r\n                    <Checkbox\r\n                        checked={check}\r\n                        onChange={(event) => { setCheck(event.target.checked) }}\r\n                        inputProps={{ 'aria-label': 'select all desserts' }}\r\n                    />\r\n                    <TextField\r\n                        className={styles.formText}\r\n                        id=\"status\"\r\n                        label=\"Status\"\r\n                        defaultValue={props.row != null ? props.row.status : ''} />\r\n                    <Button\r\n                        className={styles.formButton}\r\n                        variant='outlined'\r\n                        color='#D83367'\r\n                        type=\"submit\">\r\n                        Confirmar\r\n                    </Button>\r\n                </form>\r\n            </Box>\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default customDrawer;"]},"metadata":{},"sourceType":"module"}